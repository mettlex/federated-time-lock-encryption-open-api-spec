{
  "openapi": "3.1.0",
  "info": {
    "title": "Federated Time-Lock Encryption Key API",
    "version": "1.0",
    "license": {
      "identifier": "MIT",
      "name": "MIT"
    },
    "contact": {
      "name": "Mettle X"
    },
    "description": "Federated Time-Lock Encryption Key API",
    "summary": "Federated Time-Lock Encryption Key API"
  },
  "servers": [],
  "paths": {
    "/key/store": {
      "post": {
        "summary": "Store Key",
        "operationId": "key-store",
        "responses": {
          "200": {
            "description": "Successful response provides the data generated by the key server",
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "description": "application/json"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "",
                  "x-examples": {
                    "example-1": {
                      "random_bytes": "0x0b1747182e57b4ae3c76030f",
                      "random_bytes_digest": "0x8d50becbe445893e6ba2097d32ad297db866c8878d4456ac47ba06005cf7e9c9075701f3e4ec0d9552d36eae75609a6d6a84a94813e9925be145ebb1905c641f",
                      "key_derivation_algorithom": "PBKDF2",
                      "key_derivation_salt": "0xd0c139b3a26a87faf6dea4afdaf78a8c"
                    }
                  },
                  "additionalProperties": false,
                  "minProperties": 6,
                  "maxProperties": 6,
                  "properties": {
                    "random_bytes": {
                      "type": "string",
                      "minLength": 16,
                      "example": "0x0b1747182e57b4ae3c76030f",
                      "description": "Random bytes in hex string (starting with 0x). It's cryptographically generated by the key server and is unique on every request. It's used as an IV to encrypt the second key"
                    },
                    "random_bytes_digest": {
                      "type": "string",
                      "minLength": 16,
                      "example": "0x8d50becbe445893e6ba2097d32ad297db866c8878d4456ac47ba06005cf7e9c9075701f3e4ec0d9552d36eae75609a6d6a84a94813e9925be145ebb1905c641f",
                      "description": "Digest of the random bytes in hex string (starting with 0x) produced using a secure hashing algorithm such as SHA-512"
                    },
                    "key_derivation_algorithom": {
                      "type": "string",
                      "minLength": 1,
                      "example": "PBKDF2",
                      "description": "A key derivation algorithm which is used to derive a crypto key from the first secret key and a randomly generated salt"
                    },
                    "key_derivation_salt": {
                      "type": "string",
                      "minLength": 16,
                      "example": "0xd0c139b3a26a87faf6dea4afdaf78a8c",
                      "description": "A randomly generated salt which is used to derive a crypto key from the first secret key"
                    },
                    "hash_algorithm": {
                      "type": "string",
                      "minLength": 1,
                      "example": "SHA-512",
                      "description": "A secure hash algorithm which is used to create digests of the random bytes & the first secret key and also used in the key derivation"
                    },
                    "encryption_algorithm": {
                      "type": "string",
                      "minLength": 1,
                      "example": "AES-GCM",
                      "description": "A symmetric-key algorithm which is used to encrypt the second secret key"
                    }
                  },
                  "required": [
                    "random_bytes",
                    "random_bytes_digest",
                    "key_derivation_algorithom",
                    "key_derivation_salt",
                    "hash_algorithm",
                    "encryption_algorithm"
                  ]
                },
                "examples": {
                  "example-1-200": {
                    "value": {
                      "random_bytes": "0x0b1747182e57b4ae3c76030f",
                      "random_bytes_digest": "0x8d50becbe445893e6ba2097d32ad297db866c8878d4456ac47ba06005cf7e9c9075701f3e4ec0d9552d36eae75609a6d6a84a94813e9925be145ebb1905c641f",
                      "key_derivation_algorithom": "PBKDF2",
                      "key_derivation_salt": "0xd0c139b3a26a87faf6dea4afdaf78a8c",
                      "hash_algorithm": "SHA-512",
                      "encryption_algorithm": "AES-GCM"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "",
                "x-examples": {
                  "example-1": {
                    "lock_duration": 3600,
                    "first_secret_key": "ABC",
                    "second_secret_key": "DEF"
                  }
                },
                "additionalProperties": false,
                "minProperties": 3,
                "maxProperties": 3,
                "properties": {
                  "lock_duration": {
                    "type": "number",
                    "description": "Duration in seconds, provided by Alice, which will be added to the unix timestamp of the first recovery request (/key/recover) by Bob, will be stored by the key server as d",
                    "minimum": 1,
                    "maximum": 4294967294,
                    "example": 3600
                  },
                  "first_secret_key": {
                    "type": "string",
                    "minLength": 16,
                    "maxLength": 1024,
                    "description": "First secret key provided by Alice. Its hashed digest will be stored by the key server as f",
                    "example": "@rY[av$bvm5A%!Zp"
                  },
                  "second_secret_key": {
                    "type": "string",
                    "minLength": 16,
                    "maxLength": 1024,
                    "description": "Second secret key provided by Alice. Its encrypted cipher text will be stored by the key server as e and can be recovered by Bob only after lock_duration + timestamp of the first recovery request by Bob",
                    "example": "h~SM5pF#\"kAe.%#p"
                  }
                },
                "required": [
                  "lock_duration",
                  "first_secret_key",
                  "second_secret_key"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "lock_duration": 36000,
                    "first_secret_key": "PUT_LONG_SECRET_KEY_HERE",
                    "second_secret_key": "PUT_ANOTHER_LONG_SECRET_KEY_HERE_2"
                  }
                }
              }
            }
          },
          "description": "Request Body sent by Alice"
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "application/json"
          }
        ],
        "x-internal": false,
        "description": "Alice's first request to the key server to store an encrypted cipher text of the second secret key and the duration to lock the key after the first recovery request from Bob"
      }
    },
    "/key/read": {
      "post": {
        "summary": "Read Key",
        "operationId": "key-read",
        "responses": {
          "200": {
            "description": "Successful response provides the data stored by the key server",
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "description": "application/json"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "",
                  "x-examples": {
                    "example-1": {
                      "f": "0x397118fdac8d83ad98813c50759c85b8c47565d8268bf10da483153b747a74743a58a90e85aa9f705ce6984ffc128db567489817e4092d050d8a1cc596ddc119",
                      "d": 10,
                      "e": "0xb553ad1b82ba71b962016cae2ad6b70315c33a"
                    }
                  },
                  "additionalProperties": false,
                  "minProperties": 3,
                  "maxProperties": 3,
                  "properties": {
                    "f": {
                      "type": "string",
                      "minLength": 16,
                      "description": "Digest of the first secret key, stored by the key server"
                    },
                    "d": {
                      "type": "number",
                      "minimum": 1,
                      "description": "Duration in seconds, exactly matching with the first store key request from Alice, stored by the key server"
                    },
                    "e": {
                      "type": "string",
                      "minLength": 16,
                      "description": "Encrypted cipher text of the second secret key, stored by the key server"
                    }
                  },
                  "required": [
                    "f",
                    "d",
                    "e"
                  ]
                },
                "examples": {
                  "example-1-200": {
                    "value": {
                      "f": "0x397118fdac8d83ad98813c50759c85b8c47565d8268bf10da483153b747a74743a58a90e85aa9f705ce6984ffc128db567489817e4092d050d8a1cc596ddc119",
                      "d": 3600,
                      "e": "0xb553ad1b82ba71b962016cae2ad6b70315c33a"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "",
                "x-examples": {
                  "example-1": {
                    "first_secret_key": "ABC",
                    "second_secret_key": "DEF",
                    "random_bytes": "0x0b1747182e57b4ae3c76030f",
                    "random_bytes_digest": "0x8d50becbe445893e6ba2097d32ad297db866c8878d4456ac47ba06005cf7e9c9075701f3e4ec0d9552d36eae75609a6d6a84a94813e9925be145ebb1905c641f",
                    "key_derivation_algorithom": "PBKDF2",
                    "key_derivation_salt": "0xd0c139b3a26a87faf6dea4afdaf78a8c"
                  }
                },
                "additionalProperties": false,
                "minProperties": 8,
                "maxProperties": 8,
                "properties": {
                  "first_secret_key": {
                    "type": "string",
                    "minLength": 16,
                    "maxLength": 1024,
                    "description": "First secret key provided by Alice in the first store key request"
                  },
                  "second_secret_key": {
                    "type": "string",
                    "minLength": 16,
                    "maxLength": 1024,
                    "description": "Second secret key provided by Alice in the first store key request"
                  },
                  "random_bytes": {
                    "type": "string",
                    "minLength": 16,
                    "description": "Random bytes in hex string (starting with 0x) provided by the key server in response to the first store key request"
                  },
                  "random_bytes_digest": {
                    "type": "string",
                    "minLength": 16,
                    "description": "Digest of the random bytes in hex string (starting with 0x) provided by the key server in response to the first store key request"
                  },
                  "key_derivation_algorithom": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the algorithm used in the key derivation from the first secret key and the random salt, provided by the key server in response to the first store key request"
                  },
                  "key_derivation_salt": {
                    "type": "string",
                    "minLength": 16,
                    "description": "Random salt used in the key derivation, provided by the key server in response to the first store key request"
                  },
                  "hash_algorithm": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The secure hash algorithm which is used to create digests of the random bytes & the first secret key and also used in the key derivation,  provided by the key server in response to the first store key request "
                  },
                  "encryption_algorithm": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The symmetric-key algorithm which is used to encrypt the second secret key, provided by the key server in response to the first store key request"
                  }
                },
                "required": [
                  "first_secret_key",
                  "second_secret_key",
                  "random_bytes",
                  "random_bytes_digest",
                  "key_derivation_algorithom",
                  "key_derivation_salt",
                  "hash_algorithm",
                  "encryption_algorithm"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "first_secret_key": "@rY[av$bvm5A%!Zp",
                    "second_secret_key": "h~SM5pF#\"kAe.%#p",
                    "random_bytes": "0x0b1747182e57b4ae3c76030f",
                    "random_bytes_digest": "0x8d50becbe445893e6ba2097d32ad297db866c8878d4456ac47ba06005cf7e9c9075701f3e4ec0d9552d36eae75609a6d6a84a94813e9925be145ebb1905c641f",
                    "key_derivation_algorithom": "PBKDF2",
                    "key_derivation_salt": "0xd0c139b3a26a87faf6dea4afdaf78a8c",
                    "hash_algorithm": "SHA-512",
                    "encryption_algorithm": "AES-GCM"
                  }
                }
              }
            }
          },
          "description": "Request Body sent by Alice"
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "application/json"
          }
        ],
        "x-internal": false,
        "description": "Alice's read request to the key server to verify the decryption of the second secret key"
      },
      "parameters": []
    },
    "/key/recover": {
      "post": {
        "summary": "Recover Key",
        "operationId": "key-recover",
        "responses": {
          "200": {
            "description": "Successful response provides the status and eventually the data stored by the key server. Response Body won't contain `encrypted_second_key` if `status` is `STARTED` or `PENDING` and will contain `encrypted_second_key` if and only if `status` is `FINISHED`.",
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "description": "application/json"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response Body won't contain `encrypted_second_key` if `status` is `STARTED` or `PENDING` and will contain `encrypted_second_key` if and only if `status` is `FINISHED`",
                  "x-examples": {
                    "example-1": {
                      "status": "STARTED",
                      "duration": 3600,
                      "unlocks_at": 1642267141
                    }
                  },
                  "anyOf": [
                    {
                      "minProperties": 3,
                      "maxProperties": 3,
                      "additionalProperties": false,
                      "description": "Response when status is STARTED or PENDING",
                      "properties": {
                        "status": {
                          "type": "string",
                          "minLength": 1,
                          "enum": [
                            "STARTED",
                            "PENDING"
                          ],
                          "example": "STARTED"
                        },
                        "duration": {
                          "type": "number"
                        },
                        "unlocks_at": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "status",
                        "duration",
                        "unlocks_at"
                      ]
                    },
                    {
                      "minProperties": 4,
                      "maxProperties": 4,
                      "additionalProperties": false,
                      "description": "Response when status is FINISHED",
                      "properties": {
                        "status": {
                          "type": "string",
                          "minLength": 1,
                          "enum": [
                            "FINISHED"
                          ],
                          "example": "FINISHED"
                        },
                        "duration": {
                          "type": "number"
                        },
                        "unlocks_at": {
                          "type": "number"
                        },
                        "encrypted_second_key": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "status",
                        "duration",
                        "unlocks_at",
                        "encrypted_second_key"
                      ]
                    }
                  ],
                  "type": "object"
                },
                "examples": {
                  "example-started-1-200": {
                    "value": {
                      "status": "STARTED",
                      "duration": 3600,
                      "unlocks_at": 1642267141
                    }
                  },
                  "example-pending-2-200": {
                    "value": {
                      "status": "PENDING",
                      "duration": 3600,
                      "unlocks_at": 1642267141
                    }
                  },
                  "example-finished-3-200": {
                    "value": {
                      "status": "FINISHED",
                      "duration": 3600,
                      "unlocks_at": 1642263659,
                      "encrypted_second_key": "0xb553ad1b82ba71b962016cae2ad6b70315c33a"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Bob's operation to recover the encrypted 2nd secret key:\n\n1. The first request to this endpoint will initiate the recovery, then Bob has to wait for the `lock_duration` seconds to finish. The key server will send the `status` as `STARTED` in response to the first request.\n\n2. Before the completion of the duration + the timestamp of the first request to this endpoint, Bob won't get the encrypted 2nd secret key and will get the `status` as `PENDING`.\n\n3. After the duration + the timestamp of the first request to this endpoint, Bob will get the encrypted 2nd secret key and the `status` as `FINISHED`.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "",
                "x-examples": {
                  "example-1": {
                    "first_secret_key": "ABC",
                    "random_bytes": "0x601a8c5baae38d6d9870e98a",
                    "random_bytes_digest": "0x7dfe9e93166725956ab349cee3954aae5c608208ec4ea1701dcfa30c249d9ece2fd043c7086bfff6f79adc3b4442af1fc759f64fae1050b5518d50966a2fa86b"
                  }
                },
                "additionalProperties": false,
                "minProperties": 4,
                "maxProperties": 4,
                "properties": {
                  "first_secret_key": {
                    "type": "string",
                    "minLength": 16,
                    "maxLength": 1024,
                    "description": "First secret key which was used by Alice in the first request to store the keys (/key/store) and shared with Bob"
                  },
                  "random_bytes": {
                    "type": "string",
                    "minLength": 16,
                    "description": "Random bytes in hex string (starting with 0x) provided by the key server in response to the first store key request (/key/store) and shared with Bob"
                  },
                  "random_bytes_digest": {
                    "type": "string",
                    "minLength": 16,
                    "description": "Digest of the random bytes in hex string (starting with 0x) provided by the key server in response to the first store key request (/key/store) and shared with Bob"
                  },
                  "hash_algorithm": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The secure hash algorithm which was used to create digests of the random bytes & the first secret key, provided by the key server in response to the first store key request (/key/store) and shared with Bob"
                  }
                },
                "required": [
                  "first_secret_key",
                  "random_bytes",
                  "random_bytes_digest",
                  "hash_algorithm"
                ]
              }
            }
          },
          "description": "Request Body sent by Bob"
        }
      }
    }
  },
  "components": {
    "schemas": {},
    "securitySchemes": {}
  }
}
